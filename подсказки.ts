/**
 Чтение файлов 
 поключаем через модуль fs
 const fs = require ("fs") - получаем доступ к файловой системе
 const path =require ("path") - работа с путями 
 path.extname() - показывает раширение например (txt)



fs.readFile - асинхронная функция (не блокирует поток)
fs.readFile("путь","utf8" (err,data)=> {
   console.log(data) - в дату прихоидт наш текст 
})
fs.readFileSync ("путь","utf8") - синхронная функция блокирующая поток 
const text = fs.readFileSync ('путь', "utf8")
console.log(text)
Чтение папок 
fs.readdir ("называние папки" (err, data) => {
   console.log(data) -получим массив из файлов 
})

Запись файлов 
fs.writeFile("путь","название сообщения",(err) => { создает новый файл с сообщением которое мы укажем (и здесь только один параметр ошибка)
   if (err) {
      console.log(err)
   }
})

Создание простого сервера 
запришваем http модуль
const http = require("http") - этот модуль дает нам возможности такие как создание http сервера 
const sever = http.createServer((reqest,response) => { принимает функцию callback с аргументами reqest и responce это два обьекта 
response.end("Hello this is my first server") - тут мы формируем ответ севрема в нашем случае он вернет строку Привет это мой первый сервер 
})

sever.listen(3003) - это мы делаем чтобы прослушивать наш ответ пользователю 
вторым аргументом мы указываем на каком host будет размещен наш сервер по умолчани localhost - означает текущий компьютер 
третий параметр функция callback которая будет запущенна как только наш сервер запустится (обычно в ней пишут что сервер запущен)
server.listen(3003,"127.0.0.1", () => {
   console.log(sever listening)
})

Роутинг 
чтобы анализировать url адресса мы url модуль
const url = require("url")
если мы запустим console.log(request.url) - мы увидим что сервер обрабатывает два раза вначале запрос потом /favicon.ico
Свойство response.writeHead() (добавлено в v1..0) является встроенным свойством модуля 'http', которое отправляет заголовок ответа на запрос
response.writeHead(404) а вторым параметром принимает обьект в котором мы указываем свойства для браузера 
response.writeHead(404,{
   "content-text" : "text/html"
})

ОТладка чтобы научиться дебажить нашу программу нужно прописать флаг --inspect
















































































 */
